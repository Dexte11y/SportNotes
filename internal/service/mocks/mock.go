// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	schemas "sportnotes/internal/schemas"

	gomock "github.com/golang/mock/gomock"
)

// MockFoodList is a mock of FoodList interface.
type MockFoodList struct {
	ctrl     *gomock.Controller
	recorder *MockFoodListMockRecorder
}

// MockFoodListMockRecorder is the mock recorder for MockFoodList.
type MockFoodListMockRecorder struct {
	mock *MockFoodList
}

// NewMockFoodList creates a new mock instance.
func NewMockFoodList(ctrl *gomock.Controller) *MockFoodList {
	mock := &MockFoodList{ctrl: ctrl}
	mock.recorder = &MockFoodListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoodList) EXPECT() *MockFoodListMockRecorder {
	return m.recorder
}

// CreateFood mocks base method.
func (m *MockFoodList) CreateFood(food schemas.Food) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFood", food)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFood indicates an expected call of CreateFood.
func (mr *MockFoodListMockRecorder) CreateFood(food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFood", reflect.TypeOf((*MockFoodList)(nil).CreateFood), food)
}

// DeleteFood mocks base method.
func (m *MockFoodList) DeleteFood(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFood", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFood indicates an expected call of DeleteFood.
func (mr *MockFoodListMockRecorder) DeleteFood(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFood", reflect.TypeOf((*MockFoodList)(nil).DeleteFood), id)
}

// GetAllFoods mocks base method.
func (m *MockFoodList) GetAllFoods() ([]schemas.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFoods")
	ret0, _ := ret[0].([]schemas.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFoods indicates an expected call of GetAllFoods.
func (mr *MockFoodListMockRecorder) GetAllFoods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFoods", reflect.TypeOf((*MockFoodList)(nil).GetAllFoods))
}

// GetFoodByID mocks base method.
func (m *MockFoodList) GetFoodByID(id int) (schemas.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodByID", id)
	ret0, _ := ret[0].(schemas.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoodByID indicates an expected call of GetFoodByID.
func (mr *MockFoodListMockRecorder) GetFoodByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodByID", reflect.TypeOf((*MockFoodList)(nil).GetFoodByID), id)
}

// MockNutritionList is a mock of NutritionList interface.
type MockNutritionList struct {
	ctrl     *gomock.Controller
	recorder *MockNutritionListMockRecorder
}

// MockNutritionListMockRecorder is the mock recorder for MockNutritionList.
type MockNutritionListMockRecorder struct {
	mock *MockNutritionList
}

// NewMockNutritionList creates a new mock instance.
func NewMockNutritionList(ctrl *gomock.Controller) *MockNutritionList {
	mock := &MockNutritionList{ctrl: ctrl}
	mock.recorder = &MockNutritionListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNutritionList) EXPECT() *MockNutritionListMockRecorder {
	return m.recorder
}

// CreateNutrition mocks base method.
func (m *MockNutritionList) CreateNutrition(idUser int, nutrition schemas.Nutrition) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNutrition", idUser, nutrition)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNutrition indicates an expected call of CreateNutrition.
func (mr *MockNutritionListMockRecorder) CreateNutrition(idUser, nutrition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNutrition", reflect.TypeOf((*MockNutritionList)(nil).CreateNutrition), idUser, nutrition)
}

// DeleteNutrition mocks base method.
func (m *MockNutritionList) DeleteNutrition(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNutrition", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNutrition indicates an expected call of DeleteNutrition.
func (mr *MockNutritionListMockRecorder) DeleteNutrition(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNutrition", reflect.TypeOf((*MockNutritionList)(nil).DeleteNutrition), id)
}

// GetNutritionsByParam mocks base method.
func (m *MockNutritionList) GetNutritionsByParam(id int, startpoint, endpoint string) ([]schemas.Nutrition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNutritionsByParam", id, startpoint, endpoint)
	ret0, _ := ret[0].([]schemas.Nutrition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNutritionsByParam indicates an expected call of GetNutritionsByParam.
func (mr *MockNutritionListMockRecorder) GetNutritionsByParam(id, startpoint, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNutritionsByParam", reflect.TypeOf((*MockNutritionList)(nil).GetNutritionsByParam), id, startpoint, endpoint)
}

// MockActivityList is a mock of ActivityList interface.
type MockActivityList struct {
	ctrl     *gomock.Controller
	recorder *MockActivityListMockRecorder
}

// MockActivityListMockRecorder is the mock recorder for MockActivityList.
type MockActivityListMockRecorder struct {
	mock *MockActivityList
}

// NewMockActivityList creates a new mock instance.
func NewMockActivityList(ctrl *gomock.Controller) *MockActivityList {
	mock := &MockActivityList{ctrl: ctrl}
	mock.recorder = &MockActivityListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityList) EXPECT() *MockActivityListMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityList) CreateActivity(training schemas.Activity) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", training)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityListMockRecorder) CreateActivity(training interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityList)(nil).CreateActivity), training)
}

// DeleteActivity mocks base method.
func (m *MockActivityList) DeleteActivity(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockActivityListMockRecorder) DeleteActivity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockActivityList)(nil).DeleteActivity), id)
}

// GetActivityByID mocks base method.
func (m *MockActivityList) GetActivityByID(id int) (schemas.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityByID", id)
	ret0, _ := ret[0].(schemas.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityByID indicates an expected call of GetActivityByID.
func (mr *MockActivityListMockRecorder) GetActivityByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityByID", reflect.TypeOf((*MockActivityList)(nil).GetActivityByID), id)
}

// GetAllActivity mocks base method.
func (m *MockActivityList) GetAllActivity() ([]schemas.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActivity")
	ret0, _ := ret[0].([]schemas.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActivity indicates an expected call of GetAllActivity.
func (mr *MockActivityListMockRecorder) GetAllActivity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActivity", reflect.TypeOf((*MockActivityList)(nil).GetAllActivity))
}

// UpdateActivity mocks base method.
func (m *MockActivityList) UpdateActivity(id int, input schemas.UpdActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivity", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivity indicates an expected call of UpdateActivity.
func (mr *MockActivityListMockRecorder) UpdateActivity(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivity", reflect.TypeOf((*MockActivityList)(nil).UpdateActivity), id, input)
}

// MockUserList is a mock of UserList interface.
type MockUserList struct {
	ctrl     *gomock.Controller
	recorder *MockUserListMockRecorder
}

// MockUserListMockRecorder is the mock recorder for MockUserList.
type MockUserListMockRecorder struct {
	mock *MockUserList
}

// NewMockUserList creates a new mock instance.
func NewMockUserList(ctrl *gomock.Controller) *MockUserList {
	mock := &MockUserList{ctrl: ctrl}
	mock.recorder = &MockUserListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserList) EXPECT() *MockUserListMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserList) CreateUser(user schemas.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserListMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserList)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserList) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserListMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserList)(nil).DeleteUser), id)
}

// GetAllUsers mocks base method.
func (m *MockUserList) GetAllUsers() ([]schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserListMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserList)(nil).GetAllUsers))
}

// GetUserByID mocks base method.
func (m *MockUserList) GetUserByID(id int) (schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserListMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserList)(nil).GetUserByID), id)
}

// UpdateUser mocks base method.
func (m *MockUserList) UpdateUser(id int, input schemas.UpdUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserListMockRecorder) UpdateUser(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserList)(nil).UpdateUser), id, input)
}

// MockWorkoutList is a mock of WorkoutList interface.
type MockWorkoutList struct {
	ctrl     *gomock.Controller
	recorder *MockWorkoutListMockRecorder
}

// MockWorkoutListMockRecorder is the mock recorder for MockWorkoutList.
type MockWorkoutListMockRecorder struct {
	mock *MockWorkoutList
}

// NewMockWorkoutList creates a new mock instance.
func NewMockWorkoutList(ctrl *gomock.Controller) *MockWorkoutList {
	mock := &MockWorkoutList{ctrl: ctrl}
	mock.recorder = &MockWorkoutListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkoutList) EXPECT() *MockWorkoutListMockRecorder {
	return m.recorder
}

// CreateWorkout mocks base method.
func (m *MockWorkoutList) CreateWorkout(idUser int, workout schemas.Workout) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkout", idUser, workout)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkout indicates an expected call of CreateWorkout.
func (mr *MockWorkoutListMockRecorder) CreateWorkout(idUser, workout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkout", reflect.TypeOf((*MockWorkoutList)(nil).CreateWorkout), idUser, workout)
}

// DeleteWorkout mocks base method.
func (m *MockWorkoutList) DeleteWorkout(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkout", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkout indicates an expected call of DeleteWorkout.
func (mr *MockWorkoutListMockRecorder) DeleteWorkout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkout", reflect.TypeOf((*MockWorkoutList)(nil).DeleteWorkout), id)
}

// GetWorkoutsByParam mocks base method.
func (m *MockWorkoutList) GetWorkoutsByParam(id int, input string) ([]schemas.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkoutsByParam", id, input)
	ret0, _ := ret[0].([]schemas.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkoutsByParam indicates an expected call of GetWorkoutsByParam.
func (mr *MockWorkoutListMockRecorder) GetWorkoutsByParam(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkoutsByParam", reflect.TypeOf((*MockWorkoutList)(nil).GetWorkoutsByParam), id, input)
}
